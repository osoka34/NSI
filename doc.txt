

Программное обеспечение необходимое для функционирования программы:
- веб-сервер с доступом к интернету, на котором будет развернуто приложение
- установленный docker для развертывания приложения в контейнере
- наличие места на диске для хранения большого объема данных в бд

Язык программирования, на которых написана программа:
Python 3.12

Классы решаемых задач:
- Хранение
- Поиск
- Обработка данных


Назначение программы:
- Программа представляет возможность сохранения данных НСИ в базу данных и получения данных НСИ из базы данных.
- Также в программе реализованы алгоритмы Дейкстры и Муравьиной колонии для получения стоимости и пути между узлами графа.

Сведения о функциональных ограничениях:
- Поддержка REST API

Эксплуатационное назначение:
- Программа предназначена для использования в качестве инструмента для сохранения и получения данных НСИ из базы данных,
  а также для получения стоимости и пути между узлами графа.

Требования к организации входных данных:
- Для сохранения данных НСИ в базу данных необходимо выбрать тип НСИ и указать ссылку на файл с данными НСИ,
  после чего отправить запрос на эндпоинт /v1/nsi/load_nsi_data. Запрос и ответ в формате JSON.

Пример запроса:
{
    "download_link": "https://www.example.com/data.txt",
    "data_type": 1
}

Пример ответа:
Success 200:
{
    "success": true,
    "description": "Data loaded"
}
Failure 400:
{
    "success": false,
    "description": "Download link is empty"
}
Failure 500:
{
    "success": false,
    "description": "Internal server error"
}


Для получения данных НСИ из базы данных необходимо отправить запрос на эндпоинт /v1/nsi/get_nsi_data. Запрос и ответ в формате JSON.
Требуется указать тип НСИ и количество записей, которые необходимо получить.

Пример запроса:
{
    "data_type": 1,
    "limit": 10
}

Пример ответа:
Success 200:
{
    "success": true,
    "description": "Data loaded",
    "data": [
        {
            "id": 1,
            "name": "Name1",
            "value": "Value1"
        },
        {
            "id": 2,
            "name": "Name2",
            "value": "Value2"
        }
    ]
}
Failure 400:
{
    "success": false,
    "description": "Data type is not valid"
}
Failure 500:
{
    "success": false,
    "description": "Internal server error"
}


Для получения стоимости и пути между узлами графа необходимо отправить запрос на эндпоинт /v1/graph/any_colony или /v1/graph/dijkstra
Запрос и ответ в формате JSON.

В запросе указываются начальный и конечный узлы графа, а также размер массива и плоский массив в виде координат
для каждой точки. Далее по этим данным строится матрица смежности графа, по которой происходит поиск кратчайшего пути и его стоимости.

Пример запроса:
{
    "start_node": 0,
    "end_node": 9,
    "size": 10,
    "flatten_matrix": [0.74788737, 0.28540867, 0.99959624, 0.10110528, 0.3926201,  0.40042853, 0.635031, 0.56465142, 0.72817825, 0.19600194, 0.39843629, 0.87502986, 0.22554879, 0.18716884, 0.70307813, 0.4830509, 0.25361671, 0.6572518, 0.36114295, 0.440903]
}

Пример ответа:
Success 200:
{
    "shortest_path": [1, 2, 3, 4],
    "cost": 10.0,
    "success": true,
    "description": "ok"
}
Failure 400:
{
    "success": false,
    "description": "Matrix size does not match the specified size"
}
Failure 500:
{
    "success": false,
    "description": "Internal server error"
}



