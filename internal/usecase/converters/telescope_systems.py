from internal.entity.camera_characteristics_repository import TelescopeSystem
from internal.dto import TelescopeSystemDto


def telescope_system_from_repo_to_dto(telescope_system: TelescopeSystem) -> TelescopeSystemDto:
    return TelescopeSystemDto(
        id=telescope_system.id,
        telescope=telescope_system.telescope,
        aperture_params=telescope_system.aperture_params,
        diameter=telescope_system.diameter,
        effective_radiation_waist_factor=telescope_system.effective_radiation_waist_factor,
        magnification_system=telescope_system.magnification_system,
        magnification=telescope_system.magnification,
        inversion=telescope_system.inversion,
        gimbal=telescope_system.gimbal,
        system_state=telescope_system.system_state,
        x_vector=telescope_system.x_vector,
        target_internal_state=telescope_system.target_internal_state,
        sigma_state_noise=telescope_system.sigma_state_noise,
        constant_system_params=telescope_system.constant_system_params,
        J1=telescope_system.J1,
        J2=telescope_system.J2,
        J3=telescope_system.J3,
        J4=telescope_system.J4,
        Kg=telescope_system.Kg,
        Fs=telescope_system.Fs,
        pid_coefs1=telescope_system.pid_coefs1,
        pid_coefs2=telescope_system.pid_coefs2,
        control_vector=telescope_system.control_vector,
        real_fsm=telescope_system.real_fsm,
        state_fsm=telescope_system.state_fsm,
        x_vector_fsm=telescope_system.x_vector_fsm,
        target_internal_state_fsm=telescope_system.target_internal_state_fsm,
        sigma_fsm=telescope_system.sigma_fsm,
        state_limits=telescope_system.state_limits,
        params_fsm=telescope_system.params_fsm,
        control_vector_fsm=telescope_system.control_vector_fsm,
        omega01=telescope_system.omega01,
        Q1=telescope_system.Q1,
        Q2=telescope_system.Q2,
        pid_coefs1_fsm=telescope_system.pid_coefs1_fsm,
        pid_coefs2_fsm=telescope_system.pid_coefs2_fsm,
        linear_angle_detector=telescope_system.linear_angle_detector,
        ideal_lens=telescope_system.ideal_lens,
        distance_to_photodetector=telescope_system.distance_to_photodetector,
        matrix_photodetector=telescope_system.matrix_photodetector,
        pixel_size=telescope_system.pixel_size,
        resolution=telescope_system.resolution,
        responsivity=telescope_system.responsivity,
        uniform_spot=telescope_system.uniform_spot,
        radius=telescope_system.radius,
    )


def telescope_system_from_repo_to_dto_list(params: list[TelescopeSystem]) -> list[TelescopeSystemDto]:
    l = []
    for c in params:
        l.append(TelescopeSystemDto(
            id=c.id,
            telescope=c.telescope,
            aperture_params=c.aperture_params,
            diameter=c.diameter,
            effective_radiation_waist_factor=c.effective_radiation_waist_factor,
            magnification_system=c.magnification_system,
            magnification=c.magnification,
            inversion=c.inversion,
            gimbal=c.gimbal,
            system_state=c.system_state,
            x_vector=c.x_vector,
            target_internal_state=c.target_internal_state,
            sigma_state_noise=c.sigma_state_noise,
            constant_system_params=c.constant_system_params,
            J1=c.J1,
            J2=c.J2,
            J3=c.J3,
            J4=c.J4,
            Kg=c.Kg,
            Fs=c.Fs,
            pid_coefs1=c.pid_coefs1,
            pid_coefs2=c.pid_coefs2,
            control_vector=c.control_vector,
            real_fsm=c.real_fsm,
            state_fsm=c.state_fsm,
            x_vector_fsm=c.x_vector_fsm,
            target_internal_state_fsm=c.target_internal_state_fsm,
            sigma_fsm=c.sigma_fsm,
            state_limits=c.state_limits,
            params_fsm=c.params_fsm,
            control_vector_fsm=c.control_vector_fsm,
            omega01=c.omega01,
            Q1=c.Q1,
            Q2=c.Q2,
            pid_coefs1_fsm=c.pid_coefs1_fsm,
            pid_coefs2_fsm=c.pid_coefs2_fsm,
            linear_angle_detector=c.linear_angle_detector,
            ideal_lens=c.ideal_lens,
            distance_to_photodetector=c.distance_to_photodetector,
            matrix_photodetector=c.matrix_photodetector,
            pixel_size=c.pixel_size,
            resolution=c.resolution,
            responsivity=c.respons,
            uniform_spot=c.uniform_spot,
            radius=c.radius,
        ))
    return l


def telescope_system_from_dto_to_repo(telescope_system: TelescopeSystemDto) -> TelescopeSystem:
    return TelescopeSystem(
        id=telescope_system.id,
        telescope=telescope_system.telescope,
        aperture_params=telescope_system.aperture_params,
        diameter=telescope_system.diameter,
        effective_radiation_waist_factor=telescope_system.effective_radiation_waist_factor,
        magnification_system=telescope_system.magnification_system,
        magnification=telescope_system.magnification,
        inversion=telescope_system.inversion,
        gimbal=telescope_system.gimbal,
        system_state=telescope_system.system_state,
        x_vector=telescope_system.x_vector,
        target_internal_state=telescope_system.target_internal_state,
        sigma_state_noise=telescope_system.sigma_state_noise,
        constant_system_params=telescope_system.constant_system_params,
        J1=telescope_system.J1,
        J2=telescope_system.J2,
        J3=telescope_system.J3,
        J4=telescope_system.J4,
        Kg=telescope_system.Kg,
        Fs=telescope_system.Fs,
        pid_coefs1=telescope_system.pid_coefs1,
        pid_coefs2=telescope_system.pid_coefs2,
        control_vector=telescope_system.control_vector,
        real_fsm=telescope_system.real_fsm,
        state_fsm=telescope_system.state_fsm,
        x_vector_fsm=telescope_system.x_vector_fsm,
        target_internal_state_fsm=telescope_system.target_internal_state_fsm,
        sigma_fsm=telescope_system.sigma_fsm,
        state_limits=telescope_system.state_limits,
        params_fsm=telescope_system.params_fsm,
        control_vector_fsm=telescope_system.control_vector_fsm,
        omega01=telescope_system.omega01,
        Q1=telescope_system.Q1,
        Q2=telescope_system.Q2,
        pid_coefs1_fsm=telescope_system.pid_coefs1_fsm,
        pid_coefs2_fsm=telescope_system.pid_coefs2_fsm,
        linear_angle_detector=telescope_system.linear_angle_detector,
        ideal_lens=telescope_system.ideal_lens,
        distance_to_photodetector=telescope_system.distance_to_photodetector,
        matrix_photodetector=telescope_system.matrix_photodetector,
        pixel_size=telescope_system.pixel_size,
        resolution=telescope_system.resolution,
        responsivity=telescope_system.responsivity,
        uniform_spot=telescope_system.uniform_spot,
        radius=telescope_system.radius,
    )
